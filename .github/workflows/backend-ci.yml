name: Java CI with Spring Boot

on:
  push:
    branches:
      - '**'
      - 'Juan-Camilo-Cuenca'
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: dental_db_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: "1234"
          MYSQL_ROOT_PASSWORD: "root1234"
          MYSQL_ALLOW_EMPTY_PASSWORD: "no"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -uroot -proot1234"
          --health-interval=20s
          --health-timeout=30s
          --health-retries=10
          --mount type=tmpfs,destination=/var/lib/mysql

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Wait for MySQL
        run: sleep 45

      - name: Prepare Test Database
        run: |
          mkdir -p src/main/resources/
          cp src/test/resources/data-test.sql src/main/resources/data.sql
          mysql -h 127.0.0.1 -P 3306 -u root -proot1234 -e "CREATE DATABASE IF NOT EXISTS dental_db_test;"
          mysql -h 127.0.0.1 -P 3306 -u root -proot1234 -e "CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY '1234';"
          mysql -h 127.0.0.1 -P 3306 -u root -proot1234 -e "GRANT ALL PRIVILEGES ON dental_db_test.* TO 'test_user'@'%';"
          mysql -h 127.0.0.1 -P 3306 -u root -proot1234 -e "FLUSH PRIVILEGES;"

      - name: Run Tests
        run: ./gradlew test --info
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/dental_db_test?useSSL=false&allowPublicKeyRetrieval=true
          SPRING_DATASOURCE_USERNAME: test_user
          SPRING_DATASOURCE_PASSWORD: "1234"
          SPRING_JPA_HIBERNATE_DDL_AUTO: create

      - name: Build Project
        run: ./gradlew build -x test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            build/test-results/test/**
            build/reports/tests/test/**

      - name: Show MySQL status
        if: always()
        run: |
          docker ps -a
          docker logs $(docker ps -aqf "name=mysql") || echo "No MySQL container found"